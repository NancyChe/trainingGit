//对数组排序
public viod arraySort(){
int [] arr= {1,4,6,2,45,63,12}
Arrays.sort(arr);//使用Arrays的sort方法排序
for(int i=0;i<arr.length;i++){
system.out.println(arr[i]);

}
}
//对集合排序
public void listSort1(){
List<Integer> list = new ArrayList<Integer>();
list.add(2);
list.add(22);
list.add(23);
list.add(14);
list.add(1);
list.add(7);
}
Collections.sort(list);//使用Collections的Sort方法
for(int a: list){
system.out.println(a);
}
 //对list降序排序
    public void listSort2(){
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(55);
        list.add(9);
        list.add(0);
        list.add(2);
        Collections.sort(list, new Comparator<Integer>() {
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });//使用Collections的sort方法，并且重写compare方法
        for(int a :list){
            System.out.println(a);
        }



第一种是list中的对象实现Comparable接口
第二种方法是根据Collections.sort重载方法来实现





List特点：元素有放入顺序，元素可重复 
Map特点：元素按键值对存储，无放入顺序 
Set特点：元素无放入顺序，元素不可重复（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的） 
List接口有三个实现类：LinkedList，ArrayList，Vector 
LinkedList：底层基于链表实现，链表内存是散乱的，每一个元素存储本身内存地址的同时还存储下一个元素的地址。链表增删快，查找慢 
ArrayList和Vector的区别：ArrayList是非线程安全的，效率高；Vector是基于线程安全的，效率低 
Set接口有两个实现类：HashSet(底层由HashMap实现)，LinkedHashSet 
SortedSet接口有一个实现类：TreeSet（底层由平衡二叉树实现） 
Query接口有一个实现类：LinkList 
Map接口有三个实现类：HashMap，HashTable，LinkeHashMap 
  HashMap非线程安全，高效，支持null；HashTable线程安全，低效，不支持null 
SortedMap有一个实现类：TreeMap 
其实最主要的是，list是用来处理序列的，而set是用来处理集的。Map是知道的，存储的是键值对 
set 一般无序不重复.map kv 结构 list 有序 